#!/usr/bin/env python3

#    zart Zabbix API Retrieval Tool.
#    Copyright (C) 2020 David Marsh
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

__project__ = 'zahar'
__appname__ = 'zart'
__appdesc__ = 'Zabbix API Retrieval Tool'
__version__ = '0.3'
__author__ = 'David Marsh'
__license__ = 'GPLv3'
__copyright__ = 'Copyright 2020 David Marsh'
__url__ = 'https://github.com/rdmarsh/zahar'


import os
import sys
import logging
import click
import click_config_file
import socket
import socks
from pyzabbix import ZabbixAPI

{% for command in commands -%}
from commands import {{ command }}
{% endfor %}
root_logger = logging.getLogger()
config_file = os.path.join(click.get_app_dir(__project__, force_posix=True), 'config.ini')


class Zart(object):
    def __init__(self, config_file, zapi, apiv, out_fmt, export_filename):
        self.config_file = config_file
        self.zapi = zapi
        self.apiv = apiv
        self.out_fmt = out_fmt
        self.export_filename = export_filename


@click.group(epilog='default config file: ' + click.format_filename(config_file))
@click_config_file.configuration_option(config_file_name=config_file)
@click.option('-z', '--zab_url', help='Zabbix URL.')
@click.option('-u', '--zab_usr', help='Zabbix username.')
@click.option('-p', '--zab_pwd', help='Zabbix password.')
@click.option('-s', '--sck_prx', type=(str, int), default=(None, 1080), metavar='<HOST PORT>', help='Socks5 proxy address and port.')
@click.option('-o', '--out_fmt', default='txt', type=click.Choice(['csv', 'html', 'pretty-html', 'json', 'pretty-json', 'latex', 'raw', 'txt']), help='Output format.')
@click.option('-v', '--verbose', count=True, help='Be more verbose, -v is INFO, -vv is DEBUG')
@click.option('-x', '--export', 'export_filename', type=click.File('w'), help='Export the query to FILENAME')
@click.version_option(version=__version__)
@click.pass_context
def cli(ctx, zab_url, zab_usr, zab_pwd, sck_prx, out_fmt, verbose, export_filename):
    """
    zart Zabbix API Retrieval Tool.
    """

    if verbose >= 2:
        root_logger.setLevel(logging.DEBUG)
    elif verbose == 1:
        root_logger.setLevel(logging.INFO)
    else:
        root_logger.setLevel(logging.WARNING)

    if not zab_url or not zab_usr or not zab_pwd:
        click.secho('Error: zabbix url, username or password not set via cli or in config file', fg='red', err=True)
        click.secho('Default config file: ' + click.format_filename(config_file), fg='red', err=True)
        sys.exit(1)

    if sck_prx and None not in sck_prx:
        socks.set_default_proxy(socks.SOCKS5, sck_prx[0], sck_prx[1])
        socket.socket = socks.socksocket
        logging.info('proxy: %s:%s', sck_prx[0], sck_prx[1])

    zapi = ZabbixAPI(zab_url)
    zapi.login(zab_usr, zab_pwd)
    apiv = zapi.apiinfo.version()
    logging.info('api version: %s', apiv)
    ctx.obj = Zart(config_file, zapi, apiv, out_fmt, export_filename)


{% for command in commands -%}
cli.add_command({{ command }}.{{ command }})
{% endfor %}
if __name__ == '__main__':
    cli()

